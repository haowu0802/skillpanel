# a list of todos/goals as a step by step guide in implementing the application in TDD manner, ordered by time of completion desc
##
refactor: redirect urls
refactor: url in templates
validation: add validation to add Log to Tracker view
refactor: tracker view handles POST
validation: add text empty validation to model
test: reorganized tests
deploy: add whitenoise and configure staticfiles
deploy: add psycopg2 lib
deploy: add requirements, move database
FT: add staging test target
static: set collectstatic location and disable admin features
MILESTONE: finished basic beautify of the app
style: use Bootstrap components to beautify style
FT: change to StaticLiveServerTestCase for FT to use static files
static: fix static file routing
style: add Bootstrap styles to el
style: integrate Bootstrap
refactor: extract base.html from templates
Resource: add Bootstrap 4 to application static file directory
FT-layout: add layout/style check in FT
refactor: Tracker routing separated from site routing
MILESTONE: add feature - add Log to existing Tracker
tpl: change form action for add Log to correct URL
view: add add_log view
routing: add URL for add_log to existing Tracker
routing: change Tracker id from any char to any num
unittest: add unittest for POST - add Log to existing Tracker, and redirect to Tracker view after save
view: fix redirects to correct URL with tracker_id
view: add filter to view_tracker for Logs belong to Tracker
routing: add param tracker_id to TrackerView
routing: add URL params for Tracker id
unittest: TrackerViewTest for unique URLs, test_display_only_logs_for_tracker
MILESTONE: tracker model added, each Log now has its Tracker
tracker model: fix views for POST with Tracker obj in Log obj
tracker model: fix unittest for display logs,
tracker model: add tracker attr to logs, with FK set
tracker model: makemigrations for Tracker model
tracker model: add Tracker model to unit test
tracker model[makeTest]: update unit test for save/read logs to save/read logs and associating tracker
MILESTONE: add URL for POST create new tracker
regression: fix form action target to trackers/new
refactor: remove test_only_save_when_necessary from home_page test
refactor: remove POST functions in home_page view
new tracker: add create log to new_tracker view
new tracker: add redirect to new_tracker view
new tracker: add new_tracker view
new tracker: build url for new tracker
add unit test class for tracker creation : test new tracker, test post-save redirection
refactor home page view, template - removed invalid elements
add new template, tests for tracker view
change routing and view to make tracker RESTful-like
give a tracker its own URL
add FT for testing multiple users - feature: multiple tracker for users
refactor wait helper - to wait by page element
refactor test engine - Django test framework used
refactor FT - decoupled functional tests
add redirection after 'add log' - user experience standardized
add log model. migration, unittests - spec for models existed
add post input function - specification of how to add a log existed
add template check for home page - template check existed
add home page template - root UI template exited
add 'add' and 'list' function of tracker to FT - the first features existed
add home page - root UI existed
add tracker app - main app existed
add unit test - spec existed
add user story to functional test - guideline for app behavior existed
initialize Django project - web app existed
add initial function test - TDD started
create repo and ignorefile - project existed